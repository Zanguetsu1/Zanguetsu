import robocode.*;
import java.awt.Color;

public class Zanguetsu extends AdvancedRobot {

    private int enemiesAlive;
    private double moveDirection = 1;

    public void run() {
        setColors(Color.red, Color.yellow, Color.green); // Definir cores do robô
        setAdjustRadarForRobotTurn(true);
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);
        enemiesAlive = getOthers();

        while (true) {
            // Movimento circular para evitar tiros inimigos
            setTurnRightRadians(1 * moveDirection);
            setAhead(100);
            moveDirection *= -1;

            // Atualiza o radar
            turnRadarRightRadians(Double.POSITIVE_INFINITY);
        }
    }

    public void onScannedRobot(ScannedRobotEvent e) {
        double absBearing = getHeadingRadians() + e.getBearingRadians();
        double angleToEnemy = absBearing - getGunHeadingRadians();
        double distance = e.getDistance();

        // Ajusta a mira para o inimigo
        turnGunRightRadians(normalizeBearing(angleToEnemy));

        // Calcula a potência do tiro baseado na distância
        double power = Math.min(3, Math.max(0.1, 400 / distance));

        // Se o inimigo for o último, atira com potência máxima
        if (enemiesAlive == 1)
            power = 3;

        // Atira com a potência calculada
        setFire(power);

        // Mantém o radar travado no inimigo
        setTurnRadarRightRadians(normalizeBearing(absBearing - getRadarHeadingRadians()) * 2);
    }

    public void onHitByBullet(HitByBulletEvent e) {
        // Gira para evitar ser atingido novamente
        turnRight(normalizeBearing(e.getBearing()) + 90);
    }

    public void onHitWall(HitWallEvent e) {
        // Inverte o movimento ao colidir com a parede
        moveDirection *= -1;
    }

    public void onRobotDeath(RobotDeathEvent e) {
        // Atualiza o número de inimigos vivos
        enemiesAlive--;
    }

    // Método para normalizar um ângulo entre -pi e pi
    private double normalizeBearing(double angle) {
        while (angle > Math.PI)
            angle -= 2 * Math.PI;
        while (angle < -Math.PI)
            angle += 2 * Math.PI;
        return angle;
    }
}
